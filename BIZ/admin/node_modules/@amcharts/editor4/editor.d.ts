/**
 * Specifies the browser target for the Editor instance.
 */
interface ILauncherTarget {
    /**
     * Show Editor in a separate browser window or inline (in an iframe)
     */
    type?: 'window' | 'inline';
    /**
     * Depending on [[ILauncherTarget.type]] specifies either a window
     * or an HTML element where Editor should be rendered.
     */
    target?: string | HTMLElement | Window;
    /**
     * In case of a `window` target, specify browser window features here.
     */
    windowFeatures?: string;
}
/**
 * Supported Launcher event types
 */
declare type LauncherEventType = 'save' | 'close';
/**
 * Event argument type for Launcher event handlers.
 */
interface ILauncherEventArguments {
    /**
     * Chart config (objec-style/JSON-style) created or edited in the Editor.
     */
    chartConfig: object;
    /**
     * Themes selected in the Editor.
     *
     * Use to apply themes in your chart display code.
     */
    appliedThemes?: string[];
    /**
     * License infromation entered in the Editor.
     *
     * Use in your chart display code to apply amCharts licenses.
     */
    appliedLicenses?: string[];
}
/**
 * Launcher event handler type.
 */
declare type LauncherEventHandler = (event?: ILauncherEventArguments) => void;
/**
 * amCharts 4 Editor launcher configuration settings.
 */
interface ILauncherConfig {
    /**
     * Editor target settings specifying where to open the Editor.
     *
     * You can control whether the Editor opens in a new window/tab, inline "popup",
     * or within your specific HTML element (usually a div).
     */
    target?: ILauncherTarget;
    /**
     * Location of the Editor app files.
     *
     * By default the Editor launcher expects the Editor files to be under the `/am4editor/` directory.
     * In case you place these files in a different location, you should set this property to inform
     * the Editor launcher of the new location.
     *
     * @see [Setting up copying of the Editor “app”](https://www.amcharts.com/docs/editor4/getting-started/basics/#Setting_up_copying_of_the_Editor_app_)
     * @default /am4editor/
     */
    editorUrl?: string;
}

/**
 * Chart template specification for creating templates to be passed in the [[IConfig.templates]].
 *
 * The templates are displayed to the end-user on the "Home" screen of the Editor.
 * Fields of ITemplate are used to both display template selectors and instantiate a new chart ([[ITemplate.config]]).
 */
interface ITemplate {
    /**
     * Internal template ID (should be unique)
     */
    id: string;
    /**
     * Name displayed in the template list.
     */
    displayName: string;
    /**
     * Preview image displayed in the template list.
     *
     * Bundled template previews are 600x400 pixels in size.
     */
    previewSrc?: string;
    /**
     * Additional template discription.
     */
    description?: string;
    /**
     * Chart configuration for the template.
     *
     * This object-style (JSON-type) chart configuration will be used to instantiate a new chart in the editor.
     * Make sure to supply initial sample data so that a chart is show to the user when this configuration loads.
     */
    config: object;
}

/**
 * Editor template group. Used to group templates into tabs.
 *
 * Passed in the [[IConfig.templates]].
 */
interface ITemplateGroup {
    /**
     * Template group name (tab label).
     */
    name: string;
    /**
     * Templates in the group.
     *
     * List of template specifications of the [[ITemplate]] type. See [[ITemplate]] for details.
     */
    templates: ITemplate[];
}

/**
 * Basic information about a chart theme (shown in Editor dropdowns)
 */
interface IThemeInfo {
    /**
     * Theme name (eg. `am4themes_dark`).
     */
    name: string;
    /**
     * Display name for the theme (eg. `Dark`).
     */
    label: string;
}
/**
 * amCharts 4 engine (am4core) settings for the Editor
 */
interface IEngineConfig {
    /**
     * Built-in amCharts themes shown in the Editor's theme selector.
     *
     * Array of name-label pairs (see [[IThemeInfo]]).
     */
    availableThemes?: IThemeInfo[];
    /**
     * Names of themes to be applied to a specific chart being edited.
     */
    appliedThemes?: string[];
    /**
     * An array of amCharts 4 license numbers applied (if applicable)
     */
    licenseNumbers?: string[];
}

/**
 * Represents arbitrary chart data item.
 */
interface IChartData {
    [key: string]: any;
}

/**
 * Name:value pairs for translation (localization) strings in a string block.
 *
 * Translations are grouped into 3 blocks (see [[ITranslationPack]]).
 *
 * Eg.
 * ```javascript
 * {
 *   'app.title': 'Chart Editor',
 *   'app.save_button': 'save',
 *   'app.close_button': 'close',
 *   ...
 * }
 * ```
 */
interface ITranslationBlock {
    /**
     * Single translation string. Eg.
     * ```javascript
     * 'app.title': 'Chart Editor'
     * ```
     */
    [key: string]: string;
}
/**
 * Describes a set of localization (translation) strings for the Editor.
 *
 * The translations are grouped into 3 distinct blocks:
 *
 * * **ui** - user interface translations
 *
 * * **common** - chart element properties commonly found in multiple chart elements
 *
 * * **properties** - unique chart element properties for specific element types
 *
 * When localization engine looks for property name translations it first looks
 * in `properties` for a class-specific translation and then, if not found,
 * looks in `common`.
 */
interface ITranslationPack {
    /**
     * User interface translations
     */
    ui: ITranslationBlock;
    /**
     * Translations for chart element properties commonly found in multiple chart elements
     */
    common: ITranslationBlock;
    /**
     * Translations for unique chart element properties for specific element types
     */
    properties: ITranslationBlock;
}
/**
 * @ignore
 */
declare class Language {
    private fallbackTranslations;
    private _translations?;
    private locale?;
    translations: ITranslationPack;
    private getTranslation;
    getUiTranslation(id: string, fallback?: string): string;
    getLabel(id: string, fallback?: string): string;
}

/**
 * Editor modules.
 *
 * * **home** - let's users create new charts based on supplied templates or import their configs.
 * * **design** - the main WYSIWYG chart editor screen
 * * **data** - data-grid editor
 * * **code** - output code for the chart in several variations
 */
declare type ModuleType = 'home' | 'design' | 'data' | 'code' | 'share';
/**
 * Editor configuration.
 */
interface IConfig {
    /**
     * Available chart templates.
     *
     * If set these templates will be presented to the user on the Home screen of the Editor.
     * Set [[allowDefaultTemplates]] to `true` to display built-in (bundled) templates instead.
     */
    templates?: ITemplateGroup[];
    /**
     * Enabled Editor modules.
     *
     * List editor modules that should be accessible to the user.
     * Supported values `'home' | 'design' | 'data' | 'code'`
     */
    enabledModules?: ModuleType[];
    /**
     * Object-style (JSON) chart configuration for editing.
     *
     * Leave unset when creating a new chart or set to an existing configuration for editing.
     * You can also pass the configuration via the argument to the [[EditorLauncher.launch()]] method.
     */
    chartConfig?: object;
    /**
     * Data to use in place of template data
     * when creating a new chart.
     *
     * Set this to your dataset when you want users to create charts based on your existing data.
     */
    presetData?: IPresetData;
    /**
     * If set to `true` bundled Editor templates will be displayed.
     * Otherwise, only template supplied through the launcher are available.
     *
     * @default false
     */
    allowDefaultTemplates?: boolean;
    /**
     * Configuration for amCharts 4 engine (am4core).
     *
     * You can set amCharts themes and license numbers via this property.
     */
    engineConfig?: IEngineConfig;
    /**
     * Editor license key
     */
    editorLicense?: string;
    /**
     * Translation prompts.
     */
    language?: ITranslationPack;
}
/**
 * Settings for supplying preset data to be used in place of default template data.
 */
interface IPresetData {
    /**
     * Actual preset data.
     *
     * Your dataset as an array of name: value objects
     */
    data: Array<IChartData>;
    /**
     * Mapping of the actual preset data to standard template fields.
     *
     * To use your data the Editor needs to know what fields in your dataset correspond to standard template fields.
     *
     * For example, in the code below the suppiled dataset has `cat` and `val` fields and the typical
     * serial chart template has `category` and `value` (or `value1`, `value2`, etc.) fields.
     * So, we supply a map mapping `category` to `cat`, and `value` and `value1` to `val`.
     *
     * ```JavaScript
     * presetData: {
     *   data: [
     *     { cat: 'c1', val: 10 },
     *     { cat: 'c2', val: 20 },
     *     { cat: 'c3', val: 40 },
     *     { cat: 'c4', val: 18 }
     *   ],
     *   templatePropertyMap: new Map([
     *     ['category', 'cat'],
     *     ['value', 'val'],
     *     ['value1', 'val']
     *   ])
     * }
     * ```
     */
    templatePropertyMap: Map<string, string>;
}

/**
 * Main class to control amCharts 4 Editor in a bigger solution.
 *
 * There are 4 essential steps needed to use the Editor in your app
 * (make sure you read [the setup guide](https://www.amcharts.com/docs/editor4/getting-started/basics/#Installation) too):
 *
 * 1. Create and instance of `EditorLauncher`;
 * 2. Add event listeners for `save` and `close` events;
 * 3. Set editor configuration;
 * 4. Launch the editor.
 *
 * Here's how this would look in code:
 * ```TypeScript
 * // import Editor Launcher
 * import * as am4editor from '@amcharts/editor4';
 *
 * // instantiate launcher
 * let launcher = new am4editor.EditorLauncher();
 *
 * // add event listeners
 * launcher.addEventListener('save', renderChart);
 * launcher.addEventListener('close', () => {
 *   if (this.launcher) {
 *     this.launcher.close();
 *   }
 * });
 *
 * // set config
 * launcher.editorConfig = editorConfig;
 *
 * // launch
 * launcher.launch();
 * ```
 *
 * @see [amCharts Editor 4 Architecture, Installation, and Usage](https://www.amcharts.com/docs/editor4/getting-started/basics/)
 * @see {@link IConfig} - editor configuration
 * @see {@link ILauncherConfig} - launcher configuration
 * @see {@link LauncherEventHandler} - launcher event handler type
 * @important
 */
declare class EditorLauncher {
    private _config;
    /**
     */
    /**
    * URI for the editor application.
    *
    * By default Editor application is expected to be under `/am4editor/`.
    * Set this property to a new location, in case you've changed the default folder structure.
    */
    editorUrl: string | undefined;
    /**
     */
    /**
    * Set this to control how to open the editor window.
    *
    * When you call the [[launch()]] method, it opens the Editor based on this setting.
    * The Editor can open in an `inline` popup or a new browser window/tab.
    * Additionally, you can make it open inside a particular element (usually a DIV) on your page.
    *
    * @see {@link ILauncherTarget}
    */
    target: ILauncherTarget;
    private _editorConfig;
    /**
     */
    /**
    * Editor configuration settings.
    *
    * Configure various aspects of the Editor look, feel, and behavior via these settings.
    *
    * @see {@link IConfig}
    */
    editorConfig: IConfig;
    private editorWindow;
    private editorIFrame;
    private editorHostDiv;
    private eventHanlders;
    /**
     * Creates an instance of EditorLauncher.
     * @param {ILauncherConfig} [launcherConfig] Optional launcher settings.
     */
    constructor(launcherConfig?: ILauncherConfig);
    private _editorLicense?;
    /**
     * Sets editor license number
     */
    addLicense: (editorLicense: string) => void;
    /**
     * Launches amCharts 4 Editor.
     *
     * You can pass a chart configuration object for editing.
     * Creates a new chart otherwise.
     *
     * @param config Chart configuration to edit (if editing).
     */
    launch: (chartConfig?: object) => void;
    private editorMessageHandler;
    /**
     * Closes the Editor window.
     */
    close: () => void;
    /**
     * Add an event listener for Launcher events ('save' or 'close')
     *
     * ```TypeScript
     * // add event listeners
     * launcher.addEventListener('save', renderChart);
     * launcher.addEventListener('close', () => {
     *   if (this.launcher) {
     *     this.launcher.close();
     *   }
     * });
     * ```
     */
    addEventListener: (eventType: LauncherEventType, listener: LauncherEventHandler) => void;
    /**
     * Remove an event listener for Launcher events.
     */
    removeEventListener: (eventType: LauncherEventType, listener: LauncherEventHandler) => void;
    private handleEvent;
}

export { EditorLauncher, IConfig, IEngineConfig, ILauncherConfig, ILauncherEventArguments, ILauncherTarget, IPresetData, ITemplate, ITemplateGroup, IThemeInfo, ITranslationBlock, ITranslationPack, Language, LauncherEventHandler, LauncherEventType, ModuleType };
